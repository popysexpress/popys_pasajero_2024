import 'dart:ui';
import 'package:flutter/material.dart';
import '../../config/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray50,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(27.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.redA700,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(27.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: const BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: colorScheme.onPrimary.withOpacity(1),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray40002,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 18.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.black900,
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: 42.fSize,
          fontFamily: 'Newsreader',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: appTheme.black900,
          fontSize: 36.fSize,
          fontFamily: 'Newsreader',
          fontWeight: FontWeight.w300,
        ),
        headlineMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 28.fSize,
          fontFamily: 'Medel',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 24.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray50001,
          fontSize: 12.fSize,
          fontFamily: 'Segoe UI',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: appTheme.blueGray40001,
          fontSize: 10.fSize,
          fontFamily: 'Titillium Web',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 20.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: 18.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF0F2245), //Color(0XFF3422F2),
    //primaryTwo: Color(0XFF3422F2),
    primaryContainer: Color(0XFFB8B8B8),

    // Error colors
    errorContainer: Color(0XFF474A4C),
    onError: Color(0XFF263238),
    onErrorContainer: Color(0XFF050605),

    // On colors(text colors)
    onPrimary: Color(0X87FFFFFF),
    onPrimaryContainer: Color(0XFF0F2245),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber300 => const Color(0XFFF6C863);
  Color get amber500 => const Color(0XFFFFC107);

  // Black
  Color get black900 => const Color(0XFF000000);

  // Blue
  Color get blue500 => const Color(0XFF2196F3);
  Color get blue900 => const Color(0XFF1139BC);
  Color get blue100 => const Color(0XFF262261);
  Color get blue200 => const Color(0xFF17144E);

  //Blue L
  Color get bluelight100 => const Color(0XFF7177AB);

  // BlueGray
  Color get blueGray100 => const Color(0XFFCCCCCC);
  Color get blueGray10001 => const Color(0XFFD3D3D3);
  Color get blueGray10002 => const Color(0XFFD6D6D6);
  Color get blueGray10003 => const Color(0XFFD9D9D9);
  Color get blueGray10004 => const Color(0XFFD1D1D1);
  Color get blueGray10005 => const Color(0XFFCFCFCF);
  Color get blueGray200 => const Color(0XFFBBC1CE);
  Color get blueGray400 => const Color(0XFF8E8E8E);
  Color get blueGray40001 => const Color(0XFF7177AB);
  Color get blueGray40002 => const Color(0XFF868686);
  Color get blueGray40003 => const Color(0XFF8D8D8D);
  Color get blueGray50 => const Color(0XFFEDEDF6);
  Color get blueGray700 => const Color(0XFF515151);
  Color get blueGray800 => const Color(0XFF343B71);
  Color get blueGray900 => const Color(0XFF353535);
  Color get blueGray90001 => const Color(0XFF242E42);
  Color get blueGray90002 => const Color(0XFF28272F);
  Color get blueGray90019 => const Color(0X192C2C2C);

  // Cyan
  Color get cyan400 => const Color(0XFF25B7D3);

  // DeepOrange
  Color get deepOrange400 => const Color(0XFFFF6A4A);
  Color get deepOrange40075 => const Color(0X75FF6B4A);
  Color get deepOrangeA400 => const Color(0XFFFF1A00);

  // DeepPurple
  Color get deepPurple100 => const Color(0XFFD6CDE4);

  // Gray
  Color get gray100 => const Color(0XFFF4F5F6);
  Color get gray200 => const Color(0XFFEEEEEE);
  Color get gray20001 => const Color(0XFFF0F0F0);
  Color get gray300 => const Color(0XFFDCDAE3);
  Color get gray30001 => const Color(0XFFDCDCDC);
  Color get gray400 => const Color(0XFFC8C7CC);
  Color get gray40001 => const Color(0XFFB5B5B5);
  Color get gray40002 => const Color(0XFFC3C3C3);
  Color get gray40003 => const Color(0XFFB4B4B4);
  Color get gray50 => const Color(0XFFF8F8FF);
  Color get gray500 => const Color(0XFF93969F);
  Color get gray50001 => const Color(0XFFA5A5A5);
  Color get gray50002 => const Color(0XFF979797);
  Color get gray50003 => const Color(0XFF959595);
  Color get gray5001 => const Color(0XFFF6F5FF);
  Color get gray5002 => const Color(0XFFF8F7FF);
  Color get gray5003 => const Color(0XFFF5F4FF);
  Color get gray600 => const Color(0XFF6E6E6E);
  Color get gray60001 => const Color(0XFF707070);
  Color get gray60002 => const Color(0XFF7A7A7A);
  Color get gray60003 => const Color(0XFF747474);
  Color get gray60004 => const Color(0XFF7E7E7E);
  Color get gray700 => const Color(0XFF585858);
  Color get gray70001 => const Color(0XFF5E5E5E);
  Color get gray70002 => const Color(0XFF606060);
  Color get gray800 => const Color(0XFF464646);
  Color get gray80001 => const Color(0XFF474747);
  Color get gray900 => const Color(0XFF212121);

  // Grayf
  Color get gray5004f => const Color(0X4FA3A3A3);

  // Green
  Color get green50 => const Color(0XFFE7FBF0);
  Color get green500 => const Color(0XFF2ECB70);
  Color get green50001 => const Color(0XFF4CAF50);
  Color get green600 => const Color(0XFF34A853);
  Color get green700 => const Color(0XFF0E9347);
  Color get greenA700 => const Color(0XFF18C160);

  // Indigo
  Color get indigo800 => const Color(0XFF283593);
  Color get indigo900 => const Color(0XFF282E62);

  // Orange
  Color get orange400 => const Color(0XFFFFAA2A);
  Color get orangeA100 => const Color(0XFFFFD06F);

  // Pink
  Color get pink500 => const Color(0XFFF52D56);
  Color get pinkA200 => const Color(0XFFFF2A7F);

  // Red
  Color get red100 => const Color(0XFFFBCCD6);
  Color get red50 => const Color(0XFFFCECEF);
  Color get redA700 => const Color(0XFFFF0B0B);
  Color get redA70001 => const Color(0XFFFF0011);
  Color get redA70066 => const Color(0X66FF0012);

  // Teal
  Color get teal50 => const Color(0XFFDFE9F0);
  Color get teal5001 => const Color(0XFFD8F4E4);

  // White
  Color get whiteA700 => const Color(0XFFFEFEFD);
  Color get whiteF8 => const Color(0XFFF8F8FF);

  // Yellow
  Color get yellow900 => const Color(0XFFED7625);
  Color get yellowA400 => const Color(0XFFF7EA00);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
